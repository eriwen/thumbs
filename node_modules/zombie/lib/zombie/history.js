var Entry, History, Location, URL, html, http, jsdom, qs, util;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
http = require("http");
jsdom = require("jsdom");
html = jsdom.dom.level3.html;
qs = require("querystring");
URL = require("url");
util = require("util");
Entry = (function() {
  function Entry(history, url, options) {
    if (options) {
      this.state = options.state;
      this.title = options.title;
      this.pop = !!options.pop;
    }
    this.update = function(url) {
      this.url = URL.parse(URL.format(url));
      return this.location = new Location(history, this.url);
    };
    this.update(url);
  }
  return Entry;
})();
History = (function() {
  function History(browser) {
    var index, pageChanged, resource, stack;
    stack = [];
    index = -1;
    pageChanged = __bind(function(was) {
      var evt, url, _ref;
      url = (_ref = stack[index]) != null ? _ref.url : void 0;
      if (!was || was.host !== url.host || was.pathname !== url.pathname || was.query !== url.query) {
        return resource(url);
      } else if (was.hash !== url.hash) {
        evt = browser.window.document.createEvent("HTMLEvents");
        evt.initEvent("hashchange", true, false);
        return browser.window.dispatchEvent(evt);
      } else {
        return resource(url);
      }
    }, this);
    resource = __bind(function(url, method, data, headers) {
      var document, options, referer, _ref;
      method = (method || "GET").toUpperCase();
      if (!(url.protocol && url.hostname)) {
        throw new Error("Cannot load resource: " + (URL.format(url)));
      }
      if (browser.window.document) {
        browser.open({
          history: this,
          interactive: browser.window.parent === browser.window
        });
      }
      options = {
        url: URL.format(url),
        deferClose: false,
        parser: require("html5").HTML5,
        features: {
          QuerySelector: true,
          ProcessExternalResources: [],
          FetchExternalResources: []
        }
      };
      if (browser.runScripts) {
        options.features.ProcessExternalResources.push("script");
        options.features.FetchExternalResources.push("script");
      }
      options.features.FetchExternalResources.push("iframe");
      document = jsdom.jsdom(false, jsdom.level3, options);
      document.fixQueue();
      browser.window.document = document;
      headers = headers ? JSON.parse(JSON.stringify(headers)) : {};
      referer = (_ref = stack[index - 1]) != null ? _ref.url : void 0;
      if (referer != null) {
        headers["referer"] = referer.href;
      }
      return browser.window.resources.request(method, url, data, headers, __bind(function(error, response) {
        var body, event;
        if (error) {
          event = document.createEvent("HTMLEvents");
          event.initEvent("error", true, false);
          document.dispatchEvent(event);
          return browser.emit("error", error);
        } else {
          browser.response = [response.statusCode, response.headers, response.body];
          stack[index].update(response.url);
          body = response.body.trim() === "" ? "<html></html>" : response.body;
          document.open();
          document.write(body);
          document.close();
          if (document.documentElement) {
            return browser.emit("loaded", browser);
          } else {
            return error = "Could not parse document at " + (URL.format(url));
          }
        }
      }, this));
    }, this);
    this.forward = function() {
      return this.go(1);
    };
    this.back = function() {
      return this.go(-1);
    };
    this.go = function(amount) {
      var entry, evt, new_index, was, _ref;
      was = (_ref = stack[index]) != null ? _ref.url : void 0;
      new_index = index + amount;
      if (new_index < 0) {
        new_index = 0;
      }
      if (stack.length > 0 && new_index >= stack.length) {
        new_index = stack.length - 1;
      }
      if (new_index !== index && (entry = stack[new_index])) {
        index = new_index;
        if (entry.pop) {
          if (browser.window.document) {
            evt = browser.window.document.createEvent("HTMLEvents");
            evt.initEvent("popstate", false, false);
            evt.state = entry.state;
            browser.window.dispatchEvent(evt);
          }
          if (was.host !== stack[index].host) {
            resource(stack[index]);
          }
        } else {
          pageChanged(was);
        }
      }
    };
    this.__defineGetter__("length", function() {
      return stack.length;
    });
    this.pushState = function(state, title, url) {
      return stack[++index] = new Entry(this, url, {
        state: state,
        title: title,
        pop: true
      });
    };
    this.replaceState = function(state, title, url) {
      if (index < 0) {
        index = 0;
      }
      return stack[index] = new Entry(this, url, {
        state: state,
        title: title,
        pop: true
      });
    };
    this._assign = function(url) {
      var was, _ref;
      was = (_ref = stack[index]) != null ? _ref.url : void 0;
      stack = stack.slice(0, (index + 1) || 9e9);
      stack[++index] = new Entry(this, url);
      return pageChanged(was);
    };
    this._replace = function(url) {
      var was, _ref;
      was = (_ref = stack[index]) != null ? _ref.url : void 0;
      if (index < 0) {
        index = 0;
      }
      stack[index] = new Entry(this, url);
      return pageChanged(was);
    };
    this._loadPage = function(force) {
      if (stack[index]) {
        return resource(stack[index].url);
      }
    };
    this._submit = function(url, method, data, enctype) {
      var headers, _ref;
      headers = {
        "content-type": enctype || "application/x-www-form-urlencoded"
      };
      stack = stack.slice(0, (index + 1) || 9e9);
      url = URL.resolve((_ref = stack[index]) != null ? _ref.url : void 0, url);
      stack[++index] = new Entry(this, url);
      return resource(stack[index].url, method, data, headers);
    };
    this.extend = function(new_window) {
      new_window.__defineGetter__("history", __bind(function() {
        return this;
      }, this));
      new_window.__defineGetter__("location", __bind(function() {
        var _ref;
        return ((_ref = stack[index]) != null ? _ref.location : void 0) || new Location(this, {});
      }, this));
      return new_window.__defineSetter__("location", __bind(function(url) {
        var _ref;
        return this._assign(URL.resolve((_ref = stack[index]) != null ? _ref.url : void 0, url));
      }, this));
    };
    this.dump = function() {
      var dump, entry, i, line;
      dump = [];
      for (i in stack) {
        entry = stack[i];
        i = Number(i);
        line = i === index ? "" + (i + 1) + ": " : "" + (i + 1) + ". ";
        line += URL.format(entry.url);
        if (entry.state) {
          line += " state: " + util.inspect(entry.state);
        }
        dump.push(line);
      }
      return dump;
    };
    this.save = function() {
      var entry, i, line, serialized;
      serialized = [];
      for (i in stack) {
        entry = stack[i];
        line = URL.format(entry.url);
        if (entry.pop) {
          line += " " + (JSON.stringify(entry.state));
        }
        serialized.push(line);
      }
      return serialized.join("\n");
    };
    this.load = function(serialized) {
      var line, options, state, url, _i, _len, _ref, _ref2, _results;
      _ref = serialized.split(/\n+/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _ref2 = line.split(/\s/), url = _ref2[0], state = _ref2[1];
        options = state && {
          state: JSON.parse(state),
          title: null,
          pop: true
        };
        _results.push(stack[++index] = new Entry(this, url, state));
      }
      return _results;
    };
  }
  return History;
})();
Location = (function() {
  function Location(history, url) {
    var prop, _fn, _i, _len, _ref;
    this.assign = function(newUrl) {
      return history._assign(newUrl);
    };
    this.replace = function(newUrl) {
      return history._replace(newUrl);
    };
    this.reload = function(force) {
      return history._loadPage(force);
    };
    this.toString = function() {
      return URL.format(url);
    };
    this.__defineGetter__("href", function() {
      return url != null ? url.href : void 0;
    });
    this.__defineSetter__("href", function(url) {
      return history._assign(url);
    });
    _ref = ["hash", "host", "hostname", "pathname", "port", "protocol", "search"];
    _fn = __bind(function(prop) {
      this.__defineGetter__(prop, function() {
        return (url != null ? url[prop] : void 0) || "";
      });
      return this.__defineSetter__(prop, function(value) {
        var newUrl;
        newUrl = URL.parse(url != null ? url.href : void 0);
        newUrl[prop] = value;
        return history._assign(URL.format(newUrl));
      });
    }, this);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      prop = _ref[_i];
      _fn(prop);
    }
  }
  return Location;
})();
html.HTMLDocument.prototype.__defineGetter__("location", function() {
  return this.parentWindow.location;
});
html.HTMLDocument.prototype.__defineSetter__("location", function(value) {
  return this.parentWindow.location = value;
});
exports.History = History;