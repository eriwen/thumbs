var URL, XMLHttpRequest, core, http;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
core = require("jsdom").dom.level3.core;
http = require("http");
URL = require("url");
core.SECURITY_ERR = 18;
core.NETWORK_ERR = 19;
core.ABORT_ERR = 20;
XMLHttpRequest = function(window) {
  var reset, stateChanged;
  stateChanged = __bind(function(state) {
    this.__defineGetter__("readyState", function() {
      return state;
    });
    if (this.onreadystatechange) {
      return window._eventloop.perform(__bind(function(done) {
        return process.nextTick(__bind(function() {
          var evt;
          try {
            return this.onreadystatechange.call(this);
          } catch (error) {
            evt = window.document.createEvent("HTMLEvents");
            evt.initEvent("error", true, false);
            evt.error = error;
            return window.dispatchEvent(evt);
          } finally {
            done();
          }
        }, this));
      }, this));
    }
  }, this);
  reset = __bind(function() {
    this.__defineGetter__("readyState", function() {
      return 0;
    });
    this.__defineGetter__("status", function() {
      return 0;
    });
    this.__defineGetter__("statusText", function() {});
    this.abort = function() {};
    this.setRequestHeader = this.send = function() {
      throw new core.DOMException(core.INVALID_STATE_ERR, "Invalid state");
    };
    this.getResponseHeader = this.getAllResponseHeaders = function() {};
    return this.open = function(method, url, async, user, password) {
      var aborted, headers, _ref;
      method = method.toUpperCase();
      if (/^(CONNECT|TRACE|TRACK)$/.test(method)) {
        throw new core.DOMException(core.SECURITY_ERR, "Unsupported HTTP method");
      }
      if (!/^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/.test(method)) {
        throw new core.DOMException(core.SYNTAX_ERR, "Unsupported HTTP method");
      }
      url = URL.parse(URL.resolve(window.location.href, url));
      url.hostname || (url.hostname = window.location.hostname);
      url.host = url.port ? "" + url.hostname + ":" + url.port : url.hostname;
      url.hash = null;
      if (url.host !== window.location.host) {
        throw new core.DOMException(core.SECURITY_ERR, "Cannot make request to different domain");
      }
      if (url.protocol !== "http:") {
        throw new core.DOMException(core.NOT_SUPPORTED_ERR, "Only HTTP protocol supported");
      }
      if (url.auth) {
        _ref = url.auth.split(":"), user = _ref[0], password = _ref[1];
      }
      this._error = null;
      aborted = false;
      this.abort = function() {
        aborted = true;
        return reset();
      };
      headers = {};
      this.setRequestHeader = function(header, value) {
        return headers[header.toString().toLowerCase()] = value.toString();
      };
      this.send = function(data) {
        this.abort = function() {
          aborted = true;
          this._error = new core.DOMException(core.ABORT_ERR, "Request aborted");
          stateChanged(4);
          return reset();
        };
        return window.resources.request(method, url, data, headers, __bind(function(error, response) {
          if (error) {
            console.error("XHR error", error);
            this._error = new core.DOMException(core.NETWORK_ERR, error.message);
            stateChanged(4);
            return reset();
          } else {
            this.getResponseHeader = function(header) {
              return response.headers[header.toLowerCase()];
            };
            this.getAllResponseHeaders = function() {
              return response.headers;
            };
            this.__defineGetter__("status", function() {
              return response.statusCode;
            });
            this.__defineGetter__("statusText", function() {
              return response.statusText;
            });
            stateChanged(2);
            if (!aborted) {
              this.__defineGetter__("responseText", function() {
                return response.body;
              });
              this.__defineGetter__("responseXML", function() {});
              return stateChanged(4);
            }
          }
        }, this));
      };
      this.open = function(method, url, async, user, password) {
        this.abort();
        return this.open(method, url, async, user, password);
      };
      return stateChanged(1);
    };
  }, this);
  reset();
};
XMLHttpRequest.UNSENT = 0;
XMLHttpRequest.OPENED = 1;
XMLHttpRequest.HEADERS_RECEIVED = 2;
XMLHttpRequest.LOADING = 3;
XMLHttpRequest.DONE = 4;
exports.use = function() {
  var extend;
  extend = function(window) {
    return window.XMLHttpRequest = function() {
      return XMLHttpRequest.call(this, window);
    };
  };
  return {
    extend: extend
  };
};