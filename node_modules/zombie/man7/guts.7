.\" Generated with Ronnjs/v0.1
.\" http://github.com/kapouer/ronnjs/
.
.TH "GUTS\-ZOMBIE\.JS" "1" "April 2011" "" ""
.
.SH "NAME"
\fBguts-zombie.js\fR \-\- The Guts
.
.SH "Hacking"
To get started hacking on Zombie\.js you\'ll need Node\.js, NPM and
CoffeeScript:
.
.IP "" 4
.
.nf
$ brew install node npm
$ npm install coffee\-script
.
.fi
.
.IP "" 0
.
.P
If you\'re installing Zombie as an NPM module and want both runtime and
development dependencies, run \fBnpm install zombie \-\-dev\fR\|\.
.
.P
If you prefer to work from the source directory, you can use \fBcake
setup\fR:
.
.IP "" 4
.
.nf
$ git clone git@github\.com:assaf/zombie\.git
$ cd zombie
$ cake setup
.
.fi
.
.IP "" 0
.
.P
To help isolate your development environment, \fBcake setup\fR installs all
runtime and development dependencies into the directory \fBnode_modules\fR
by running \fBnpm bundle\fR\|\.  To see which dependencies are installed, run \fBnpm bundle list installed\fR (not \fBnpm list installed\fR)\.
.
.P
To run the test suite:
.
.IP "" 4
.
.nf
$ cake test
.
.fi
.
.IP "" 0
.
.P
If you\'re hacking on Zombie and testing it in a different project, you
can "install" your working directory using \fBnpm link\fR\|\.  Keep in mind,
though, Zombie is written in CoffeeScript ad your project is loading the
compiled JavaScript\.  You need to keep both synchronized by running \fBcake build\fR or \fBcake watch\fR\|\.
.
.P
Install the working directory and have all changes compiled in
real\-time:
.
.IP "" 4
.
.nf
$ npm link && cake watch
.
.fi
.
.IP "" 0
.
.P
To generate the documentation:
.
.IP "" 4
.
.nf
$ cake doc:pages
$ open html/index\.html
.
.fi
.
.IP "" 0
.
.SH "Grocking"
Zombie\.js is written in CoffeeScript \fIhttp://jashkenas\.github\.com/coffee\-script/\fR, a language
that mixes the best parts of Python and Ruby and compiles one\-to\-one
into JavaScript\.
.
.P
The DOM implementation is JSDOM \fIhttp://jsdom\.org/\fR, which provides an
emulation of DOM Level 3\. There are some issues and some features
Zombie\.js needs but JSDOM doesn\'t care for\.  Those are patched onto
JSDOM in \fBlib/zombie/jsdom_patches\.coffee\fR and \fBlib/zombie/forms\.coffee\fR\|\.
.
.P
HTML5 parsing is handled by HTML5 \fIhttps://github\.com/aredridel/html5\fR\|\.
.
.P
DOM selectors are provided by JSDOM using Sizzle\.js \fIhttp://sizzlejs\.com/\fR\|\.
.
.SH "Testing"
Zombie\.js is tested using Vows \fIhttp://vowsjs\.org/\fR\|\.
.
.P
Since we\'re testing a Web browser, we also need a Web server, so it
spins up an instance of Express \fIhttp://expressjs\.com/\fR\|\.  Spinning up
Express and making sure it doesn\'t power down before all tests are done
(Vows is asynchronous, like everything in Node) is the responsibility of \fBspec/helper\.coffee\fR\|\.
.
.P
To stress Zombie\.js, we have test cases that use Sammy\.js and jQuery\.
The scripts themselves are contained in the \fBspec/\.scripts\fR directory\.
The dot is necessary to hide these JS files from Vows\.
.
.SH "Documenting"
Zombie\.js documentation is written in Markdown \fIhttp://daringfireball\.net/projects/markdown/syntax#code\fR\|\.
.
.P
Everything you need to know to get started is covered by \fBREADME\.md\fR, so
it shows up when you visit the Github
page \fIhttp://github\.com/assaf/zombie\fR\|\.
.
.P
Additional documentation lives in the \fBdoc\fR directory\.  Annotated source
code generated using Docco \fIhttp://jashkenas\.github\.com/docco/\fR\|\.
