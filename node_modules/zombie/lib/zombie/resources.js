var Cache, HTTP, HTTPRequest, HTTPResponse, QS, Resource, Resources, STATUS, URL, VM, indent, inspect, partial;
var __hasProp = Object.prototype.hasOwnProperty, __extends = function(child, parent) {
  for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; }
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor;
  child.__super__ = parent.prototype;
  return child;
}, __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
inspect = require("util").inspect;
HTTP = require("http");
QS = require("querystring");
URL = require("url");
VM = process.binding("evals");
partial = function(text, length) {
  if (length == null) {
    length = 250;
  }
  if (text.length <= length) {
    return text;
  }
  return text.substring(0, length - 3) + "...";
};
indent = function(text) {
  return text.toString().split("\n").map(function(l) {
    return "  " + l;
  }).join("\n");
};
Resource = (function() {
  function Resource(request) {
    var elapsed, start, _response;
    request.resource = this;
    this.redirects = 0;
    start = new Date().getTime();
    elapsed = 0;
    _response = null;
    this.__defineGetter__("request", function() {
      return request;
    });
    this.__defineGetter__("response", function() {
      return _response;
    });
    this.__defineGetter__("size", function() {
      return (typeof response != "undefined" && response !== null ? response.body.length : void 0) || 0;
    });
    this.__defineGetter__("time", function() {
      return elapsed;
    });
    this.__defineGetter__("url", function() {
      return (typeof response != "undefined" && response !== null ? response.url : void 0) || request.url;
    });
    this.__defineSetter__("response", function(response) {
      elapsed = new Date().getTime() - start;
      response.resource = this;
      return _response = response;
    });
    this.toString = function() {
      return "URL:      " + this.url + "\nTime:     " + this.time + "ms\nSize:     " + (this.size / 1024) + "kb\nRequest:\n" + (indent(this.request)) + "\nResponse:\n" + (indent(this.response)) + "\n";
    };
  }
  return Resource;
})();
HTTPRequest = (function() {
  function HTTPRequest(method, url, headers, body) {
    this.__defineGetter__("method", function() {
      return method;
    });
    this.__defineGetter__("url", function() {
      return URL.format(url);
    });
    this.__defineGetter__("headers", function() {
      return headers;
    });
    this.__defineGetter__("body", function() {
      return body;
    });
    this.toString = function() {
      return "" + (inspect(this.headers)) + "\n" + (partial(this.body));
    };
  }
  return HTTPRequest;
})();
HTTPResponse = (function() {
  function HTTPResponse(url, statusCode, headers, body) {
    this.__defineGetter__("body", function() {
      return body;
    });
    this.__defineGetter__("headers", function() {
      return headers;
    });
    this.__defineGetter__("statusCode", function() {
      return statusCode;
    });
    this.__defineGetter__("statusText", function() {
      return STATUS[statusCode];
    });
    this.__defineGetter__("redirected", function() {
      return !!this.resource.redirects;
    });
    this.__defineGetter__("url", function() {
      return URL.format(url);
    });
    this.toString = function() {
      return "" + this.statusCode + " " + this.statusText + "\n" + (inspect(this.headers)) + "\n" + (partial(this.body));
    };
  }
  return HTTPResponse;
})();
Resources = (function() {
  __extends(Resources, Array);
  function Resources(window) {
    var makeRequest, stringify, stringifyPrimitive, typeOf;
    window.resources = this;
    this.__defineGetter__("first", function() {
      return this[0];
    });
    this.__defineGetter__("last", function() {
      return this[this.length - 1];
    });
    this.get = function(url, callback) {
      return this.request("GET", url, null, null, callback);
    };
    this.request = function(method, url, data, headers, callback) {
      return window._eventloop.perform(function(done) {
        return makeRequest(method, url, data, headers, null, function(error, response) {
          done();
          return callback(error, response);
        });
      });
    };
    this.dump = function() {
      return console.log(this.toString());
    };
    this.toString = function() {
      return this.map(function(resource) {
        return resource.toString();
      }).join("\n");
    };
    makeRequest = __bind(function(method, url, data, headers, resource, callback) {
      var body, boundary, client, cookies, lines, request, secure;
      url = URL.parse(url);
      method = (method || "GET").toUpperCase();
      headers = headers ? JSON.parse(JSON.stringify(headers)) : {};
      headers["User-Agent"] = window.navigator.userAgent;
      if (method === "GET" || method === "HEAD") {
        if (data) {
          url.search = "?" + stringify(data);
        }
        body = "";
      } else {
        switch (headers["content-type"]) {
          case "application/x-www-form-urlencoded":
            body = stringify(data);
            break;
          case "multipart/form-data":
            boundary = "" + (new Date().getTime()) + (Math.random());
            lines = ["--" + boundary];
            data.map(function(item) {
              var content, disp, encoding, mime, name, value, values, _i, _len, _results;
              name = item[0];
              values = item[1];
              if (typeof values !== "array") {
                values = [values];
              }
              _results = [];
              for (_i = 0, _len = values.length; _i < _len; _i++) {
                value = values[_i];
                disp = "Content-Disposition: form-data; name=\"" + name + "\"";
                encoding = null;
                if (value.read) {
                  content = value.read();
                  disp += "; filename=\"" + value + "\"";
                  mime = value.mime;
                  if (value.mime !== "text/plain") {
                    encoding = "base64";
                  }
                } else {
                  content = value;
                  mime = "text/plain";
                }
                switch (encoding) {
                  case "base64":
                    content = content.toString("base64");
                    break;
                  case "7bit":
                    content = content.toString("ascii");
                    break;
                  case null:
                    break;
                  default:
                    throw new Error("Unsupported transfer encoding " + encoding);
                }
                lines.push(disp);
                lines.push("Content-Type: " + mime);
                lines.push("Content-Length: " + content.length);
                if (encoding) {
                  lines.push("Content-Transfer-Encoding: " + encoding);
                }
                lines.push("");
                lines.push(content);
                _results.push(lines.push("--" + boundary));
              }
              return _results;
            });
            if (lines.length < 2) {
              body = "";
            } else {
              body = lines.join("\r\n") + "--\r\n";
            }
            headers["content-type"] += "; boundary=" + boundary;
            break;
          default:
            headers["content-type"] || (headers["content-type"] = "text/plain;charset=UTF-8");
            body = data.toString();
        }
        headers["content-length"] = body.length;
      }
      headers["Host"] = url.host;
      if (!(url.pathname && url.pathname[0] === "/")) {
        url.pathname = "/" + (url.pathname || "");
      }
      url.hash = null;
      cookies = window.browser.cookies(url.hostname, url.pathname);
      cookies.addHeader(headers);
      secure = url.protocol === "https:";
      url.port || (url.port = secure ? 443 : 80);
      client = HTTP.createClient(url.port, url.hostname, secure);
      request = client.request(method, "" + url.pathname + (url.search || ""), headers);
      if (!resource) {
        resource = new Resource(new HTTPRequest(method, url, headers, body));
        this.push(resource);
      }
      window.browser.log(function() {
        return "" + method + " " + (URL.format(url));
      });
      client.on("error", callback);
      request.on("response", __bind(function(response) {
        response.setEncoding("utf8");
        body = "";
        response.on("data", function(chunk) {
          return body += chunk;
        });
        return response.on("end", __bind(function() {
          var error, redirect;
          cookies.update(response.headers["set-cookie"]);
          resource.response = new HTTPResponse(url, response.statusCode, response.headers, body);
          error = null;
          switch (response.statusCode) {
            case 200:
            case 201:
            case 202:
            case 204:
              window.browser.log(function() {
                return "" + method + " " + (URL.format(url)) + " => " + response.statusCode;
              });
              callback(null, resource.response);
              break;
            case 301:
            case 302:
            case 303:
            case 307:
              if (response.headers["location"]) {
                redirect = URL.resolve(URL.format(url), response.headers["location"]);
                if ((resource.redirects += 1) > 5) {
                  error = new Error("Too many redirects, from " + (URL.format(url)) + " to " + redirect);
                } else {
                  process.nextTick(__bind(function() {
                    return makeRequest("GET", redirect, null, null, resource, callback);
                  }, this));
                }
              } else {
                error = new Error("Redirect with no Location header, cannot follow");
              }
              break;
            default:
              error = new Error("Could not load resource at " + (URL.format(url)) + ", got " + response.statusCode);
          }
          if (error) {
            window.browser.log(function() {
              return "Error loading " + (URL.format(url)) + ": " + error.message;
            });
            error.response = resource.response;
            resource.error = error;
            return callback(error);
          }
        }, this));
      }, this));
      return request.end(body, "utf8");
    }, this);
    typeOf = function(object) {
      return Object.prototype.toString.call(object);
    };
    stringifyPrimitive = __bind(function(v) {
      var _ref;
      switch (typeOf(v)) {
        case '[object Boolean]':
          return v != null ? v : {
            'true': 'false'
          };
        case '[object Number]':
          return (_ref = isFinite(v)) != null ? _ref : {
            v: ''
          };
        case '[object String]':
          return v;
        default:
          return '';
      }
    }, this);
    stringify = __bind(function(object) {
      if (!object.map) {
        return object.toString();
      }
      return object.map(function(k) {
        if (Array.isArray(k[1])) {
          return k[1].map(function(v) {
            return QS.escape(stringifyPrimitive(k[0])) + "=" + QS.escape(stringifyPrimitive(v));
          }).join("&");
        } else {
          return QS.escape(stringifyPrimitive(k[0])) + "=" + QS.escape(stringifyPrimitive(k[1]));
        }
      }).join("&");
    }, this);
  }
  return Resources;
})();
Cache = (function() {
  function Cache(browser) {
    this.get = function(url, callback) {
      return this.request("GET", url, null, null, callback);
    };
    this.request = function(method, url, data, headers, callback) {
      return resources.request(method, url, data, headers, callback);
    };
  }
  return Cache;
})();
STATUS = {
  100: "Continue",
  101: "Switching Protocols",
  200: "OK",
  201: "Created",
  202: "Accepted",
  203: "Non-Authoritative",
  204: "No Content",
  205: "Reset Content",
  206: "Partial Content",
  300: "Multiple Choices",
  301: "Moved Permanently",
  302: "Found",
  303: "See Other",
  304: "Not Modified",
  305: "Use Proxy",
  307: "Temporary Redirect",
  400: "Bad Request",
  401: "Unauthorized",
  402: "Payment Required",
  403: "Forbidden",
  404: "Not Found",
  405: "Method Not Allowed",
  406: "Not Acceptable",
  407: "Proxy Authentication Required",
  408: "Request Timeout",
  409: "Conflict",
  410: "Gone",
  411: "Length Required",
  412: "Precondition Failed",
  413: "Request Entity Too Large",
  414: "Request-URI Too Long",
  415: "Unsupported Media Type",
  416: "Requested Range Not Satisfiable",
  417: "Expectation Failed",
  500: "Internal Server Error",
  501: "Not Implemented",
  502: "Bad Gateway",
  503: "Service Unavailable",
  504: "Gateway Timeout",
  505: "HTTP Version Not Supported"
};
exports.extend = function(window) {
  return new Resources(window);
};