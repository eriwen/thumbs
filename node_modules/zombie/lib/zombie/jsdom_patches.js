var URL, core, html5, http;
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
core = require("jsdom").dom.level3.core;
URL = require("url");
http = require("http");
html5 = require("html5").HTML5;
core.HTMLElement.prototype.__defineGetter__("offsetLeft", function() {
  return 0;
});
core.HTMLElement.prototype.__defineGetter__("offsetTop", function() {
  return 0;
});
core.HTMLElement.prototype.__defineGetter__("offsetWidth", function() {
  return 100;
});
core.HTMLElement.prototype.__defineGetter__("offsetHeight", function() {
  return 100;
});
core.HTMLAnchorElement.prototype._eventDefaults = {
  click: function(event) {
    var anchor;
    anchor = event.target;
    if (anchor.href) {
      return anchor.ownerDocument.parentWindow.location = anchor.href;
    }
  }
};
core.resourceLoader.load = function(element, href, callback) {
  var document, file, loaded, ownerImplementation, tagName, url, window;
  document = element.ownerDocument;
  window = document.parentWindow;
  ownerImplementation = document.implementation;
  tagName = element.tagName.toLowerCase();
  if (ownerImplementation.hasFeature('FetchExternalResources', tagName)) {
    switch (tagName) {
      case "iframe":
        return element.window.location = URL.resolve(element.window.parent.location, href);
      default:
        url = URL.parse(this.resolve(document, href));
        loaded = function(response, filename) {
          return callback.call(this, response.body, URL.parse(response.url).pathname);
        };
        if (url.hostname) {
          return window.resources.get(url, this.enqueue(element, loaded, url.pathname));
        } else {
          file = this.resolve(document, url.pathname);
          return this.readFile(file, this.enqueue(element, loaded, file));
        }
    }
  }
};
core.languageProcessors = {
  javascript: function(element, code, filename) {
    var document, event, window;
    document = element.ownerDocument;
    window = document.parentWindow;
    window.browser.log(function() {
      if (filename) {
        return "Running script from " + filename;
      }
    });
    try {
      return window._evaluate(code, filename);
    } catch (error) {
      event = document.createEvent("HTMLEvents");
      event.initEvent("error", true, false);
      event.error = error;
      return window.dispatchEvent(event);
    }
  }
};
core.CharacterData.prototype.__defineSetter__("_nodeValue", function(newValue) {
  var ev, oldValue;
  oldValue = this._text || "";
  this._text = newValue;
  if (this.ownerDocument && this.parentNode) {
    ev = this.ownerDocument.createEvent("MutationEvents");
    ev.initMutationEvent("DOMCharacterDataModified", true, false, this, oldValue, newValue, null, null);
    return this.dispatchEvent(ev);
  }
});
core.CharacterData.prototype.__defineGetter__("_nodeValue", function() {
  return this._text;
});
core.Document.prototype._elementBuilders["script"] = function(doc, s) {
  var script;
  script = new core.HTMLScriptElement(doc, s);
  script.sourceLocation || (script.sourceLocation = {
    line: 0,
    col: 0
  });
  if (doc.implementation.hasFeature("ProcessExternalResources", "script")) {
    script.addEventListener("DOMCharacterDataModified", function(event) {
      var code, filename;
      code = event.target.nodeValue;
      if (code.trim().length > 0) {
        filename = this.ownerDocument.URL;
        return this.ownerDocument.parentWindow._eventloop.perform(__bind(function(done) {
          var loaded;
          loaded = __bind(function(code, filename) {
            if (core.languageProcessors[this.language] && code === this.text) {
              core.languageProcessors[this.language](this, code, filename);
            }
            return done();
          }, this);
          return core.resourceLoader.enqueue(this, loaded, filename)(null, code);
        }, this));
      }
    });
  }
  return script;
};
core.Document.prototype._elementBuilders["iframe"] = function(doc, s) {
  var iframe, window;
  window = doc.parentWindow;
  iframe = new core.HTMLIFrameElement(doc, s);
  iframe.window = window.browser.open({
    interactive: false
  });
  iframe.window.parent = window;
  return iframe;
};
core.HTMLDocument.prototype.fixQueue = function() {
  return this._queue.push = function(callback) {
    var item, q;
    q = this;
    item = {
      prev: q.tail,
      check: function() {
        if (!q.paused && (this.data !== void 0 || this.err) && !this.prev) {
          callback(this.err, this.data);
          if (q.tail === this) {
            q.tail = null;
          }
          if (this.next) {
            this.next.prev = null;
            return this.next.check();
          }
        }
      }
    };
    if (q.tail) {
      q.tail.next = item;
    }
    q.tail = item;
    return function(err, data) {
      item.err = err;
      item.data = data;
      return item.check();
    };
  };
};